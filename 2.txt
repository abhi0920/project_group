import tensorflow as tf 

from tensorflow import keras
import matplotlib.pyplot as plt
import numpy as np

data=tf.keras.datasets.mnist
from tensorflow.keras.optimizers import SGD

(x_train,y_train),(x_test,y_test)=data.load_data()

x_test.shape

x_train.shape     
print(x_train[0])

x_train,x_test =x_train/255,x_test/255   

model=tf.keras.models.Sequential([
tf.keras.layers.Flatten(input_shape=(28,28)),       
tf.keras.layers.Dense(150,activation='relu'),      
tf.keras.layers.Dense(10,activation='softmax')     
])

sgd=SGD(0.02)     
model.compile(optimizer='sgd', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

history=model.fit(x_train, y_train,validation_data=(x_test,y_test),epochs=5)

test_loss,test_acc=model.evaluate(x_test,y_test)

plt.imshow(x_test[4])
prediction=model.predict(x_test)      
print(np.argmax(prediction[4])) 

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

plt.title('Training Loss and accuracy')
plt.ylabel('accuracy/Loss')
plt.xlabel('epoch')
plt.legend(['accuracy', 'val_accuracy','loss','val_loss'])
plt.show()